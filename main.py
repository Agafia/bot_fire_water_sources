"""
–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è:
 - —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Å—Ç–∞—Ö –∑–∞–±–æ—Ä–∞ –≤–æ–¥—ã –º–æ–±–∏–ª—å–Ω–æ–π –ø–æ–∂–∞—Ä–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–æ–π
 - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤–µ–¥–µ–Ω–∏–π –≤ —Å–µ—Ä–≤–∏—Å–µ NextGIS WEB
 - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ —Å–µ—Ä–≤–∏—Å–µ GoogleDrive

–ü–µ—Ä–µ–ø–∏—Å–∞–Ω–æ –Ω–∞ aiogram
"""
import asyncio
import logging
import sys
import datetime
import pytz

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramBadRequest

from pyproj import Transformer
from loguru import logger
from notifiers.logging import NotificationHandler


from config import Config
import nextgis
import pydrive
import templates

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# tg_handler = NotificationHandler(provider='telegram',
#                                  defaults={'token': Config.bot_token, 'chat_id': Config.tg_admin_chat})
# logger.add(tg_handler, level='ERROR', catch=True)
logger.add('logs/log_aiogram.log', level='WARNING', rotation='10 MB', compression='zip', catch=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=Config.bot_token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()


class BotStates(StatesGroup):
    fid = State()
    position = State()
    checkout = State()
    water = State()
    workable = State()
    work_note = State()
    entrance = State()
    entr_note = State()
    plate_exist = State()
    shot_medium = State()
    shot_full = State()
    shot_long = State()
    shot_plate = State()
    save = State()


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–æ—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
bot_states = {'None': '–®–∞–≥ 0. –î–∏–∞–ª–æ–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω',
              'BotStates:fid': '–®–∞–≥ 1. –ß–∏—Å–ª–æ–≤–æ–π –ò–î',
              'BotStates:position': '–®–∞–≥ 2. –ì–µ–æ–ø–æ–∑–∏—Ü–∏—è',
              'BotStates:checkout': '–®–∞–≥ 3. –í–∏–¥ –∫–æ–Ω—Ç—Ä–æ–ª—è',
              'BotStates:water': '–®–∞–≥ 4. –ù–∞–ª–∏—á–∏–µ –≤–æ–¥—ã',
              'BotStates:workable': '–®–∞–≥ 5. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ü–ê',
              'BotStates:work_note': '–®–∞–≥ 5.1. –ü–æ—á–µ–º—É –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ü–ê',
              'BotStates:entrance': '–®–∞–≥ 6. –ü–æ–¥—ä–µ–∑–¥ –∫ –í–ò',
              'BotStates:entr_note': '–®–∞–≥ 6.1. –ü–æ—á–µ–º—É –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω –ø–æ–¥—ä–µ–∑–¥ –ü–ê',
              'BotStates:plate_exist': '–®–∞–≥ 7. –£–∫–∞–∑–∞—Ç–µ–ª—å',
              'BotStates:shot_medium': '–®–∞–≥ 8. –£–∑–ª–æ–≤–æ–π —Å–Ω–∏–º–æ–∫',
              'BotStates:shot_full': '–®–∞–≥ 9. –û–±–∑–æ—Ä–Ω—ã–π —Å–Ω–∏–º–æ–∫',
              'BotStates:shot_long': '–®–∞–≥ 10. –û—Ä–∏–µ–Ω—Ç–∏—Ä—É—é—â–∏–π —Å–Ω–∏–º–æ–∫',
              'BotStates:shot_plate': '–®–∞–≥ 11. –°–Ω–∏–º–æ–∫ —É–∫–∞–∑–∞—Ç–µ–ª—è',
              'BotStates:save': '–®–∞–≥ 12. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è'}

value_lists = {'checkout': ['—É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å –ø—É—Å–∫–æ–º –≤–æ–¥—ã', '—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–µ–∑ –ø—É—Å–∫–∞ –≤–æ–¥—ã', '–æ—Å–º–æ—Ç—Ä –ø–æ–ª–Ω—ã–π', '–æ—Å–º–æ—Ç—Ä –≤–Ω–µ—à–Ω–∏–π'],
               'workable': ['–≤–æ–∑–º–æ–∂–Ω–∞', '–Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'],
               'entrance': ['–≤–æ–∑–º–æ–∂–µ–Ω', '–Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'],
               'water': ['–∏–º–µ–µ—Ç—Å—è', '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'],
               'plate': ['–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', '–µ—Å—Ç—å (–ø–æ –ì–û–°–¢)', '–µ—Å—Ç—å (–Ω–µ –ì–û–°–¢)']}


# --- Middleware –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
async def verification_user(handler, event, data):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞."""
    members_status = ['creator', 'administrator', 'member', 'restricted']
    try:
        member = await bot.get_chat_member(Config.tg_canal_id, event.from_user.id)
        if member.status in members_status:
            return await handler(event, data)
        else:
            await event.answer('‚ö† –ë–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º "–ì—Ä—É–ø–ø—ã "–ü–ü–í –°–≥–ú–ü–°–ì"')
            logger.warning(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {event.from_user.id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞.')
    except TelegramBadRequest as exc:
        if "user not found" in exc.message:
            await event.answer('‚ö† –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.')
            logger.warning(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {event.from_user.id} –Ω–µ –ΩÔøΩÔøΩ–π–¥–µ–Ω –≤ –∫–∞–Ω–∞–ª–µ.')
        else:
            logger.critical(f'–û—à–∏–±–∫–∞ API –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {exc}')
            await event.answer(f'‚ö† –û—à–∏–±–∫–∞ API –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {exc.message}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –∫–∞–Ω–∞–ª–µ.')
    except Exception as exc:
        logger.critical(f'–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {exc}')
        await event.answer('‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.')


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def date_time_now():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è."""
    try:
        current_time = datetime.datetime.now(pytz.timezone(Config.timezone))
        return {'year':     "{:02d}".format(current_time.year),
                'month':    "{:02d}".format(current_time.month),
                'day':      "{:02d}".format(current_time.day),
                'hour':     "{:02d}".format(current_time.hour),
                'minute':   "{:02d}".format(current_time.minute)}
    except Exception as exc:
        logger.critical(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏: {exc}')
        return None


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@dp.message(Command('stop'))
async def cmd_stop(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop."""
    current_state = await state.get_state()
    if current_state is not None:
        await state.clear()
        await message.answer("–î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω. –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.")
    else:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    await message.delete()


@dp.message(Command('help'))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text='–ë–û–¢ –ø–æ —à–∞–≥–∞–º', url=Config.url_help))
    builder.row(InlineKeyboardButton(text='–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', url=Config.url_help))
    builder.row(InlineKeyboardButton(text='WEB –∫–∞—Ä—Ç–∞', url=Config.url_map))
    builder.row(InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', callback_data='delete_message'))
    await message.answer('üìñ <b>–ü–æ–º–æ—â—å</b>', reply_markup=builder.as_markup())


@dp.callback_query(F.data == 'delete_message')
async def delete_message_callback(callback: CallbackQuery):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞."""
    await callback.message.delete()


@dp.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    logger.debug(f'–°—Ç–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: username - {message.from_user.username}, '
                 f'first_name - {message.from_user.first_name}, last_name - {message.from_user.last_name}, '
                 f'id - {message.from_user.id}')

    current_state = await state.get_state()
    if current_state is not None:
        state_name = bot_states.get(current_state, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
        await message.answer(f'<i>–î–∏–∞–ª–æ–≥ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –∑–∞–ø—É—â–µ–Ω.\n'
                             f'–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {state_name}</i>')
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –∫–æ–º–∞–Ω–¥–µ /start
    args = message.text.split()
    if len(args) > 1 and args[1].isdigit():
        fid = args[1]
        await message.answer(f'üÜî <b>1. –ß–∏—Å–ª–æ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:</b> {fid}')
        await state.set_state(BotStates.fid)
        # –°–æ–∑–¥–∞–µ–º "—Ñ–µ–π–∫–æ–≤–æ–µ" —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –µ–≥–æ –≤ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
        fake_message = message
        fake_message.text = fid
        await process_step_fid(fake_message, state)
    else:
        await state.set_state(BotStates.fid)
        await message.answer('üÜî <b>1. –ß–∏—Å–ª–æ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä </b>')


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π ---
@dp.message(BotStates.fid)
async def process_step_fid(message: Message, state: FSMContext):
    """–®–∞–≥ 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∏—Å–ª–æ–≤–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞."""
    if not message.text.isdigit():
        await message.answer("‚ö† –û–∂–∏–¥–∞–µ—Ç—Å—è —á–∏—Å–ª–æ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä.")
        return

    msg_fid = await message.answer('<i>–ó–∞–ø—Ä–æ—Å –∫ NextGIS WEB ...</i>')
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        loop = asyncio.get_event_loop()
        feature = await loop.run_in_executor(
            None,
            lambda: nextgis.get_feature(Config.ngw_resource_wi_points, message.text, geom='no')
        )

        if feature:
            name = f"{feature['fields']['name']}\n{feature['fields']['–ü–æ—Å–µ–ª–µ–Ω–∏–µ']}, " \
                   f"{feature['fields']['–£–ª–∏—Ü–∞']}, {feature['fields']['–î–æ–º']}"
            await msg_fid.edit_text(f'<i>{name}</i>')
            await state.update_data(fid=int(message.text), name=name, date_time=date_time_now())
            await state.set_state(BotStates.position)
            await message.answer('üåè <b>2. –ì–µ–æ–ø–æ–∑–∏—Ü–∏—è –≤–æ–¥–æ–∏—Å—Ç–æ—á–Ω–∏–∫–∞</b>')
        else:
            await msg_fid.edit_text('<i>NextGIS –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –∏–ª–∏ –Ω–µ –Ω–∞—à—ë–ª –ò–î. \n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ò–î –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ</i>')
            await asyncio.sleep(4)
            await msg_fid.delete()
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ 1 (fid): {e!r}")
        await msg_fid.edit_text(f"<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ NextGIS.</b>\n"
                                f"<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞.</i>\n"
                                f"<code>–û—à–∏–±–∫–∞: {e}</code>")
        await state.clear()


@dp.message(BotStates.position, F.location)
async def process_step_position(message: Message, state: FSMContext):

    """–®–∞–≥ 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏."""
    transformer = Transformer.from_crs("EPSG:4326", "EPSG:3857")
    
    loop = asyncio.get_event_loop()
    sm = await loop.run_in_executor(None, transformer.transform, message.location.latitude, message.location.longitude)
    
    await state.update_data(EPSG_3857=f'POINT({str(sm[0])} {str(sm[1])})')
    await state.set_state(BotStates.checkout)

    builder = InlineKeyboardBuilder()
    builder.button(text=value_lists['checkout'][0]+' (üå° +1¬∞C –∏ –≤—ã—à–µ)', callback_data=value_lists['checkout'][0])
    builder.button(text=value_lists['checkout'][1]+' (üå° 0¬∞C –∏ –Ω–∏–∂–µ)', callback_data=value_lists['checkout'][1])
    builder.button(text=value_lists['checkout'][2]+' (üå° -15¬∞C –∏ –≤—ã—à–µ)', callback_data=value_lists['checkout'][2])
    builder.button(text=value_lists['checkout'][3]+' (üå° -16¬∞C –∏ –Ω–∏–∂–µ)', callback_data=value_lists['checkout'][3])
    builder.adjust(1) # 1 –∫–Ω–æ–ø–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ
    
    await message.answer('‚úÖ <b>3. –°–ø–æ—Å–æ–± –∫–æ–Ω—Ç—Ä–æ–ª—è </b>', reply_markup=builder.as_markup())


@dp.callback_query(BotStates.checkout)
async def process_step_checkout(callback: CallbackQuery, state: FSMContext):
    """–®–∞–≥ 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–æ—Å–æ–±–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è."""
    await callback.message.edit_text(f"–í—ã–±—Ä–∞–Ω–æ: {callback.data}", reply_markup=None)
    await state.update_data(checkout=callback.data)
    await state.set_state(BotStates.water)

    builder = InlineKeyboardBuilder()
    for item in value_lists['water']:
        builder.button(text=item, callback_data=item)
    builder.adjust(3) # 3 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ

    await callback.message.answer('üí¶ <b>4. –ù–∞–ª–∏—á–∏–µ –≤–æ–¥—ã </b>', reply_markup=builder.as_markup())


@dp.callback_query(BotStates.water)
async def process_step_water(callback: CallbackQuery, state: FSMContext):
    """–®–∞–≥ 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤–æ–¥—ã."""
    await callback.message.edit_text(f"–í—ã–±—Ä–∞–Ω–æ: {callback.data}", reply_markup=None)
    await state.update_data(water=callback.data)
    await state.set_state(BotStates.workable)

    builder = InlineKeyboardBuilder()
    for item in value_lists['workable']:
        builder.button(text=item, callback_data=item)
    builder.adjust(3)

    await callback.message.answer('üõ† <b>5. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏</b>', reply_markup=builder.as_markup())


@dp.callback_query(BotStates.workable)
async def process_step_workable(callback: CallbackQuery, state: FSMContext):
    """–®–∞–≥ 5. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏."""
    await callback.message.edit_text(f"–í—ã–±—Ä–∞–Ω–æ: {callback.data}", reply_markup=None)
    await state.update_data(workable=callback.data)
    await state.set_state(BotStates.entrance)

    builder = InlineKeyboardBuilder()
    for item in value_lists['entrance']:
        builder.button(text=item, callback_data=item)
    builder.adjust(3)

    await callback.message.answer('üöí <b>6. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥—ä–µ–∑–¥–∞</b>', reply_markup=builder.as_markup())


@dp.callback_query(BotStates.entrance)
async def process_step_entrance(callback: CallbackQuery, state: FSMContext):
    """–®–∞–≥ 6. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–¥—ä–µ–∑–¥–∞."""
    await callback.message.edit_text(f"–í—ã–±—Ä–∞–Ω–æ: {callback.data}", reply_markup=None)
    await state.update_data(entrance=callback.data)
    await state.set_state(BotStates.shot_medium)
    await callback.message.answer('üì∏ üí¶ <b>7. –£–∑–ª–æ–≤–æ–π —Å–Ω–∏–º–æ–∫</b>')


async def process_shot(message: Message, state: FSMContext, shot_name: str, next_state: State, next_prompt: str):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π."""
    if not message.photo:
        await message.answer("‚ö† –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è.")
        return
    
    await state.update_data({shot_name: message.photo[-1].file_id})
    await state.set_state(next_state)
    if next_prompt:
        await message.answer(next_prompt)


@dp.message(BotStates.shot_medium, F.photo)
async def process_step_shot_medium(message: Message, state: FSMContext):
    """–®–∞–≥ 7. –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–∑–ª–æ–≤–æ–≥–æ —Å–Ω–∏–º–∫–∞."""
    await process_shot(message, state, 'shot_medium_id', BotStates.shot_full, 'üì∏ üöí <b>8. –û–±–∑–æ—Ä–Ω—ã–π —Å–Ω–∏–º–æ–∫</b>')


@dp.message(BotStates.shot_full, F.photo)
async def process_step_shot_full(message: Message, state: FSMContext):
    """–®–∞–≥ 8. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–∑–æ—Ä–Ω–æ–≥–æ —Å–Ω–∏–º–∫–∞."""
    await process_shot(message, state, 'shot_full_id', BotStates.shot_long, 'üì∏ üèò <b>9. –û—Ä–∏–µ–Ω—Ç–∏—Ä—É—é—â–∏–π —Å–Ω–∏–º–æ–∫</b>')


@dp.message(BotStates.shot_long, F.photo)
async def process_step_shot_long(message: Message, state: FSMContext):
    """–®–∞–≥ 9. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É—é—â–µ–≥–æ —Å–Ω–∏–º–∫–∞."""
    await process_shot(message, state, 'shot_long_id', BotStates.plate_exist, '')
    
    builder = InlineKeyboardBuilder()
    for item in value_lists['plate']:
        builder.button(text=item, callback_data=item)
    builder.adjust(3)
    await message.answer('üîÄ <b>10. –ù–∞–ª–∏—á–∏–µ —É–∫–∞–∑–∞—Ç–µ–ª—è</b>', reply_markup=builder.as_markup())


@dp.callback_query(BotStates.plate_exist)
async def process_step_plate_exist(callback: CallbackQuery, state: FSMContext):
    """–®–∞–≥ 10. –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–ª–∏—á–∏—è —É–∫–∞–∑–∞—Ç–µ–ª—è."""
    await callback.message.edit_text(f"–í—ã–±—Ä–∞–Ω–æ: {callback.data}", reply_markup=None)
    await state.update_data(plate_exist=callback.data)

    if callback.data == '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç':
        await state.update_data(shot_plate=None)
        await state.set_state(BotStates.save)
        await callback.message.answer('üíæ <b>12. –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ /save</b>')
    else:
        await state.set_state(BotStates.shot_plate)
        await callback.message.answer('üì∏ üîÄ <b>11. –°–Ω–∏–º–æ–∫ —É–∫–∞–∑–∞—Ç–µ–ª—è</b>')


@dp.message(BotStates.shot_plate, F.photo)
async def process_step_shot_plate(message: Message, state: FSMContext):
    """–®–∞–≥ 11. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–Ω–∏–º–∫–∞ —É–∫–∞–∑–∞—Ç–µ–ª—è."""
    await process_shot(message, state, 'shot_plate', BotStates.save, 'üíæ <b>12. –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ /save</b>')


@dp.message(Command('save'))
async def cmd_save(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /save."""
    current_state = await state.get_state()
    if current_state != BotStates.save:
        state_name = bot_states.get(current_state, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
        await message.answer(f"<i>–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω.\n–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {state_name}</i>")
        return

    data = await state.get_data()
    msg_text = f"<b>–ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö...</b>\n<i>–ò–î: {data['fid']}</i>"
    msg = await message.answer(msg_text)

    loop = asyncio.get_event_loop()

    # try:
    # 1. –ó–∞–ø—Ä–æ—Å –∫ NextGIS WEB
    msg_text += "\n<i>1. –ó–∞–ø—Ä–æ—Å –∫ NextGIS WEB...</i>"
    await msg.edit_text(msg_text)
    json_object = await loop.run_in_executor(
        None,
        lambda: nextgis.get_feature(Config.ngw_resource_wi_points, data['fid'], geom='no')
    )
    folder_id = json_object['fields']['–ò–î_–ø–∞–ø–∫–∏_–ì—É–≥–ª_–¥–∏—Å–∫']
    folder_name = f"–ò–î-{data['fid']} {json_object['fields']['name']} {json_object['fields']['–ü–æ—Å–µ–ª–µ–Ω–∏–µ']}, {json_object['fields']['–£–ª–∏—Ü–∞']}, {json_object['fields']['–î–æ–º']}"

    # 2. –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ –ø–∞–ø–∫–µ Google Drive
    msg_text += "\n<i>2. –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ –ø–∞–ø–∫–µ Google Drive...</i>"
    await msg.edit_text(msg_text)
    google_folder = await loop.run_in_executor(None, pydrive.create_folder, folder_id, folder_name, Config.parent_folder_id)

    if folder_id != google_folder:
        msg_text += "\n<i>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –≤ NextGIS WEB...</i>"
        await msg.edit_text(msg_text)
        description = await loop.run_in_executor(None, templates.description_water_intake,
                                                 data['fid'], json_object['fields']['–ü–æ—Å–µ–ª–µ–Ω–∏–µ'],
                                                 json_object['fields']['–£–ª–∏—Ü–∞'], json_object['fields']['–î–æ–º'],
                                                 json_object['fields']['–û—Ä–∏–µ–Ω—Ç–∏—Ä'], json_object['fields']['–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ'],
                                                 json_object['fields']['–í–æ–¥–æ–æ—Ç–¥–∞—á–∞_—Å–µ—Ç–∏'], google_folder,
                                                 json_object['fields']['–°—Å—ã–ª–∫–∞_–ì—É–≥–ª_—É–ª–∏—Ü—ã'],
                                                 json_object['fields']['–ò–î_—Ö–æ–∑_—Å—É–±—ä–µ–∫—Ç–∞'])
        fields_values = {'description': description, '–ò–î_–ø–∞–ø–∫–∏_–ì—É–≥–ª_–¥–∏—Å–∫': google_folder}
        await loop.run_in_executor(
            None,
            lambda: nextgis.ngw_put_feature(Config.ngw_resource_wi_points, data['fid'], fields_values, description=description)
        )

    date_name = f"{data['date_time']['year']}-{data['date_time']['month']}-{data['date_time']['day']}" \
                f"_{data['date_time']['hour']}:{data['date_time']['minute']}"

    # 3-6. –ü–µ—Ä–µ–¥–∞—á–∞ —Å–Ω–∏–º–∫–æ–≤
    photo_steps = [
        ('shot_medium_id', '3. –ü–µ—Ä–µ–¥–∞—á–∞ —É–∑–ª–æ–≤–æ–≥–æ —Å–Ω–∏–º–∫–∞...'),
        ('shot_full_id', '4. –ü–µ—Ä–µ–¥–∞—á–∞ –æ–±–∑–æ—Ä–Ω–æ–≥–æ —Å–Ω–∏–º–∫–∞...'),
        ('shot_long_id', '5. –ü–µ—Ä–µ–¥–∞—á–∞ –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É—é—â–µ–≥–æ —Å–Ω–∏–º–∫–∞...'),
        ('shot_plate', '6. –ü–µ—Ä–µ–¥–∞—á–∞ —Å–Ω–∏–º–∫–∞ —É–∫–∞–∑–∞—Ç–µ–ª—è...')
    ]

    for i, (shot_key, step_text) in enumerate(photo_steps):
        if data.get(shot_key):
            msg_text += f"\n<i>{step_text}</i>"
            await msg.edit_text(msg_text)
            file_info = await bot.get_file(data[shot_key])
            file_url = f'https://api.telegram.org/file/bot{Config.bot_token}/{file_info.file_path}'
            file_name = f"{i+1}_{date_name}"
            await loop.run_in_executor(None, pydrive.create_file_from_url, file_url, file_name, google_folder)

    # 7. –ó–∞–ø–∏—Å—å –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤ NextGIS WEB
    msg_text += "\n<i>7. –ó–∞–ø–∏—Å—å –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤ NextGIS WEB...</i>"
    await msg.edit_text(msg_text)
    # logger.info(data['fid'], data['checkout'], data['water'],
    #             data['workable'], data['entrance'], data['plate_exist'],
    #             data['date_time'], data['EPSG_3857'])
    await loop.run_in_executor(None, nextgis.ngw_post_wi_checkup,
                                data['fid'], data['checkout'], data['water'],
                                data['workable'], data['entrance'], data['plate_exist'],
                                data['date_time'], data['EPSG_3857'])


    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª
    msg_in_grp = f"{data['name']}\n{date_name}"
    await bot.send_message(Config.tg_canal_id, msg_in_grp)

    msg_text += "\n<i>8. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ</i>"
    await msg.edit_text(msg_text)
    await state.clear()
    await asyncio.sleep(2)
    await msg.delete()

    # except Exception as e:
    #     logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
    #     await msg.edit_text(f"<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.</b>\n"
    #                         f"<i>–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.</i>\n"
    #                         f"<code>{e}</code>")
    #     await state.clear()


@dp.message()
async def process_unknown_messages(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    current_state = await state.get_state()
    if current_state is None:
        await message.answer('<i>–î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start</i>')
    else:
        state_name = bot_states.get(current_state, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —ÅÔøΩÔøΩ—Å—Ç–æ—è–Ω–∏–µ")
        await message.answer(f'<i>–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞: {state_name}</i>\n'
                             f'<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /stop</i>')


async def main() -> None:
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware –¥–ª—è –≤—Å–µ—Ö message –∏ callback_query
    dp.message.middleware(verification_user)
    dp.callback_query.middleware(verification_user)

    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
