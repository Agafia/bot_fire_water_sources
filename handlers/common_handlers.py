from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from loguru import logger

from keyboards import get_help_keyboard
from lexicon import bot_states
from states import BotStates
from handlers import survey_handlers

router = Router()


@router.message(Command('stop'))
async def cmd_stop(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop."""
    current_state = await state.get_state()
    if current_state is not None:
        await state.clear()
        await message.answer("–î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω. –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.")
    else:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    await message.delete()


@router.message(Command('help'))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    await message.answer('üìñ <b>–ü–æ–º–æ—â—å</b>', reply_markup=get_help_keyboard())


@router.callback_query(F.data == 'delete_message')
async def delete_message_callback(callback: CallbackQuery):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞."""
    await callback.message.delete()


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    logger.debug(f'–°—Ç–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: username - {message.from_user.username}, '
                 f'first_name - {message.from_user.first_name}, last_name - {message.from_user.last_name}, '
                 f'id - {message.from_user.id}')

    current_state = await state.get_state()
    if current_state is not None:
        state_name = bot_states.get(current_state, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
        await message.answer(f'<i>–î–∏–∞–ª–æ–≥ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –∑–∞–ø—É—â–µ–Ω.\n'
                             f'–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {state_name}</i>')
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –∫–æ–º–∞–Ω–¥–µ /start
    args = message.text.split()
    if len(args) > 1 and args[1].isdigit():
        fid = args[1]
        await message.answer(f'üÜî <b>1. –ß–∏—Å–ª–æ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:</b> {fid}')
        await state.set_state(BotStates.fid)
        # –°–æ–∑–¥–∞–µ–º "—Ñ–µ–π–∫–æ–≤–æ–µ" —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –µ–≥–æ –≤ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
        fake_message = message
        fake_message.text = fid
        await survey_handlers.process_step_fid(fake_message, state)
    else:
        await state.set_state(BotStates.fid)
        await message.answer('üÜî <b>1. –ß–∏—Å–ª–æ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä </b>')


@router.message()
async def process_unknown_messages(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    current_state = await state.get_state()
    if current_state is None:
        await message.answer('<i>–î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start</i>')
    else:
        state_name = bot_states.get(current_state, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
        await message.answer(f'<i>–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞: {state_name}</i>\n'
                             f'<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /stop</i>')